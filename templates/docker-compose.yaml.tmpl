version: '3.7'

networks:
  {{ network }}:

services:
  {%- for orderer in ordererorg.orderers %}
  {{ orderer.name }}:
    container_name: {{ orderer.name }}
    labels:
      ccperf.container.type: sut
    image: hyperledger/fabric-orderer:${FABRIC_TAG}
    environment:
      #- ORDERER_GENERAL_LOGLEVEL=${ORDERER_GENERAL_LOGLEVEL}
      - FABRIC_LOGGING_SPEC=${FABRIC_LOGGING_SPEC}
      - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:{{ orderer.ports.exporter or "8080" }}
      - ORDERER_OPERATIONS_TLS_ENABLED=false
      - ORDERER_METRICS_PROVIDER=prometheus
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT={{ orderer.ports.requests }}
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID={{ ordererorg.mspid }}
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=${ORDERER_GENERAL_TLS_ENABLED}
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_PROFILE_ENABLED=true
      - ORDERER_GENERAL_PROFILE_BLOCKPROFILERATE=1000
      - ORDERER_GENERAL_PROFILE_MUTEXPROFILEFRACTION=1000
      {%- if ordererorg.type == "etcdraft" %}
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      {% endif %}
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    {%- if orderer.volume is defined and orderer.volume == "tmpfs" %}
    tmpfs:
      - /var/hyperledger/production
    {%- endif %}
    volumes:
      {%- if orderer.volume is defined and orderer.volume != "tmpfs" %}
      - {{ orderer.volume }}:/var/hyperledger/production
      {%- endif %}
      - ./genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ./crypto-config/ordererOrganizations/{{ ordererorg.domain }}/orderers/{{orderer.name}}.{{ ordererorg.domain }}/msp:/var/hyperledger/orderer/msp
      - ./crypto-config/ordererOrganizations/{{ ordererorg.domain }}/orderers/{{orderer.name}}.{{ ordererorg.domain }}/tls/:/var/hyperledger/orderer/tls
    ports:
      - {{ orderer.ports.requests }}:{{ orderer.ports.requests }}
      {%- if orderer.ports.exporter %}
      - {{ orderer.ports.exporter }}:{{ orderer.ports.exporter }}
      {%- endif %}
    networks:
      {{ network }}:
        aliases:
          - {{ orderer.name}}.{{ ordererorg.domain }}
    {%- if ordererorg.orderers | selectattr('host', 'ne', orderer.host) | list | length is gt 0 %}
    extra_hosts:
    {%- for o in ordererorg.orderers %}
    {%- if o.host != orderer.host %}
      - {{ o.name}}.{{ ordererorg.domain }}:{{ o.host | getip }}
    {%- endif %}
    {%- endfor %}
    {%- endif %}
    healthcheck:
      test: wget -q -O- http://localhost:{{ orderer.ports.exporter or "8080" }}/healthz | grep -q '"status":"OK"'
      interval: 5s
      timeout: 5s
      retries: 0
  {%- endfor  %}
  {%- for org in orgs -%}
  {%- for peer in org.peers %}

  {{ org.name }}-{{ peer.name }}:
    container_name: {{ org.name }}-{{ peer.name }}
    labels:
      ccperf.container.type: sut
    image: hyperledger/fabric-peer:${FABRIC_TAG}
    environment:
      - FABRIC_LOGGING_SPEC=${FABRIC_LOGGING_SPEC}
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:{{ peer.ports.exporter or "8080" }}
      - CORE_OPERATIONS_TLS_ENABLED=false
      - CORE_METRICS_PROVIDER=prometheus
      - CORE_PEER_ID={{ peer.name }}.{{ org.domain }}
      - CORE_PEER_LOCALMSPID={{ org.mspid }}
      - CORE_PEER_ADDRESS={{ peer.name }}.{{ org.domain }}:{{ peer.ports.requests }}
      - CORE_PEER_LISTENADDRESS=0.0.0.0:{{ peer.ports.requests }}
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT={{ peer.name }}.{{ org.domain }}:{{ peer.ports.requests }}
      - CORE_PEER_GOSSIP_USELEADERELECTION={% if org.useLeaderElection %}true{% else %}false{% endif %}
      {%- for bootstrap in org.peers %}
      {%- if bootstrap.name == peer.bootstrap %}
      - CORE_PEER_GOSSIP_BOOTSTRAP={{ bootstrap.name }}.{{ org.domain }}:{{ bootstrap.ports.requests }}
      {% if not org.useLeaderElection %}- CORE_PEER_GOSSIP_ORGLEADER={% if bootstrap.name == peer.name %}true{% else %}false{% endif %}{% endif %}
      {%- endif %}
      {%- endfor %}
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_{{ network }}
      - CORE_CHAINCODE_BUILDER=hyperledger/fabric-ccenv:${FABRIC_TAG}
      - CORE_CHAINCODE_GOLANG_RUNTIME=hyperledger/fabric-baseos:${FABRIC_TAG}
      - CORE_PEER_TLS_ENABLED=${CORE_PEER_TLS_ENABLED}
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_PROFILE_BLOCKPROFILERATE=1000
      - CORE_PEER_PROFILE_MUTEXPROFILEFRACTION=1000
      - CORE_LEDGER_STATE_TXMANAGER=${TXMANAGER}
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    {%- if peer.volume is defined and peer.volume == "tmpfs" %}
    tmpfs:
      - /var/hyperledger/production
    {%- endif %}
    volumes:
      {%- if peer.volume is defined and peer.volume != "tmpfs" %}
      - {{ peer.volume }}:/var/hyperledger/production
      {%- endif %}
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/{{ org.domain }}/peers/{{ peer.name }}.{{ org.domain }}/msp:/etc/hyperledger/fabric/msp
      - ./crypto-config/peerOrganizations/{{ org.domain }}/peers/{{ peer.name }}.{{ org.domain }}/tls:/etc/hyperledger/fabric/tls
    ports:
      - {{ peer.ports.requests }}:{{ peer.ports.requests }}
      {%- if peer.ports.exporter %}
      - {{ peer.ports.exporter }}:{{ peer.ports.exporter }}
      {%- endif %}
    networks:
      {{ network }}:
        aliases:
          - {{ peer.name }}.{{ org.domain }}
    {%- if (ordererorg.orderers + org.peers) | selectattr('host', 'ne', peer.host) | list | length is gt 0 %}
    extra_hosts:
    {%- for o in ordererorg.orderers %}
    {%- if o.host != peer.host %}
      - {{ o.name}}.{{ ordererorg.domain }}:{{ o.host | getip }}
    {%- endif %}
    {%- endfor %}
    {%- for p in org.peers %}
    {%- if p.host != peer.host %}
      - {{ p.name}}.{{ org.domain }}:{{ p.host | getip }}
    {%- endif %}
    {%- endfor %}
    {%- endif %}
    healthcheck:
      test: wget -q -O- http://localhost:{{ peer.ports.exporter or "8080" }}/healthz | grep -q '"status":"OK"'
      interval: 5s
      timeout: 5s
      retries: 0
  {%- endfor %}
  {%- endfor %}

  {% for zookeeper in zookeepers %}
  {{ zookeeper.name }}:
    container_name: {{ zookeeper.name }}
    hostname: {{ zookeeper.name }}
    image: hyperledger/fabric-zookeeper:${BASE_TAG}
    environment:
      - ZOO_MY_ID={{ zookeeper.id }}
      - ZOO_SERVERS={%- for z in zookeepers %}server.{{ z.id }}={{ z.name }}:2888:3888{% if not loop.last %} {% endif %}{% endfor %}
    {%- if zookeeper.volume %}
    volumes:
      - {{ zookeeper.volume }}/data:/data
      - {{ zookeeper.volume }}/datalog:/datalog
    {% endif %}
    #ports:
    #  - '2181:2181'
    #  - '2888:2888'
    #  - '3888:3888'
    networks:
      {{ network }}:
  {%- endfor  %}

  {% for kafka in kafkas %}
  {{ kafka.name }}:
    image: hyperledger/fabric-kafka:${BASE_TAG}
    container_name: {{ kafka.name }}
    hostname: {{ kafka.name }}
    environment:
      #- KAFKA_SOCKET_REQUEST_MAX_BYTES=104857600 # 100 * 1024 * 1024 B
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_PORT={{ kafka.port }}
      - KAFKA_BROKER_ID={{ kafka.id }}
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_BROKER_RACK={{ kafka.rack }}
      - KAFKA_ZOOKEEPER_CONNECT={%- for z in zookeepers %}{{ z.name }}:2181{% if not loop.last %},{% endif %}{% endfor %}
    {%- if kafka.volume %}
    volumes:
      - {{ kafka.volume }}/kafka-logs:/tmp/kafka-logs
    {% endif %}
    #ports:
    #  - {{ kafka.port }}:{{ kafka.port }}
    networks:
      {{ network }}:
  {%- endfor  %}

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    pid: host
    ports:
      - 9100:9100
    volumes:
      - type: bind
        source: /
        target: /host
        read_only: true
        #bind:
        #  propagation: rslave
    command: --path.rootfs /host
    hostname: ${HOSTNAME}
    #uts_mode: host
    #network_mode: host
    networks:
      {{ network }}:

  cadvisor:
    container_name: cadvisor
    image: google/cadvisor:v0.32.0
    command: --disable_metrics=""
    volumes:
     - /:/rootfs:ro
     - /var/run:/var/run:rw
     - /sys:/sys:ro
     - /var/lib/docker/:/var/lib/docker:ro
    networks:
      {{ network }}:

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    command:
      - '--config.file=/config/prometheus.yml'
      - '--storage.tsdb.path=/data'
    volumes:
      - ./prometheus:/config
    {%- if prometheus.volume %}
      - {{  prometheus.volume }}:/data
    {% endif %}
    ports:
      - {{ prometheus.port }}:9090
    networks:
      {{ network }}:

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager
    ports:
      - 9093:9093
    networks:
      {{ network }}:

  pushgateway:
    container_name: pushgateway
    image: prom/pushgateway
    ports:
      - {{ pushgateway.port }}:9091
    networks:
      {{ network }}:

  grafana:
    container_name: grafana
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
    entrypoint: /scripts/launch.sh
    volumes:
      - ./grafana/scripts:/scripts
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - {{ grafana.port }}:3000
    networks:
      {{ network }}:

  tinyproxy:
    container_name: tinyproxy
    image: tinyproxy
    ports:
      - {{ proxy.port }}:8888
    networks:
      {{ network }}:
